d <- 2
# Parámetros iniciales del modelo SVF
C <- 1
eps <- 0
method <- 'SSVF'
# Instanciar y entrenar el modelo SVF
svf_instance <- create_SVF(method, inputs, outputs, data, C, eps, d)
svf_instance <- train.SSVF(svf_instance)
# Resolver el modelo y mostrar las soluciones
svf_solution <- solve.SSVF(svf_instance)
library(svfpackage2)
# Definir los datos
data <- data.frame(
x1 = c(1, 2, 3, 4),
x2 = c(1, 3, 2, 4),
y1 = c(1, 3, 2, 4)
)
# Definir listas de inputs, outputs y la cantidad de particiones
inputs <- c("x1", "x2")
outputs <- c("y1")
d <- 2
# Parámetros iniciales del modelo SVF
C <- 1
eps <- 0
method <- 'SSVF'
# Instanciar y entrenar el modelo SVF
svf_instance <- create_SVF(method, inputs, outputs, data, C, eps, d)
svf_instance <- train.SSVF(svf_instance)
# Resolver el modelo y mostrar las soluciones
svf_solution <- solve(svf_instance)
# Imprimir las soluciones de w
print(svf_solution$w)
# Probar la función get_estimation
estimations <- list(
get_estimation.SVF(svf_instance, c(1, 2)),
get_estimation.SVF(svf_instance, c(3, 4)),
get_estimation.SVF(svf_instance, c(1, 7)),
get_estimation.SVF(svf_instance, c(7, 1)),
get_estimation.SVF(svf_instance, c(2, 4)),
get_estimation.SVF(svf_instance, c(7, 1))
)
library(svfpackage2)
# Definir los datos
data <- data.frame(
x1 = c(1, 2, 3, 4),
x2 = c(1, 3, 2, 4),
y1 = c(1, 3, 2, 4)
)
# Definir listas de inputs, outputs y la cantidad de particiones
inputs <- c("x1", "x2")
outputs <- c("y1")
d <- 2
# Parámetros iniciales del modelo SVF
C <- 1
eps <- 0
method <- 'SSVF'
# Instanciar y entrenar el modelo SVF
svf_instance <- create_SVF(method, inputs, outputs, data, C, eps, d)
svf_instance <- train.SSVF(svf_instance)
# Resolver el modelo y mostrar las soluciones
svf_solution <- solve(svf_instance)
# Imprimir las soluciones de w
print(svf_solution$w)
# Probar la función get_estimation
estimations <- list(
get_estimation.SVF(svf_instance, c(1, 2)),
get_estimation.SVF(svf_instance, c(3, 4)),
get_estimation.SVF(svf_instance, c(1, 7)),
get_estimation.SVF(svf_instance, c(7, 1)),
get_estimation.SVF(svf_instance, c(2, 4)),
get_estimation.SVF(svf_instance, c(7, 1))
)
library(svfpackage2)
# Definir los datos
data <- data.frame(
x1 = c(1, 2, 3, 4),
x2 = c(1, 3, 2, 4),
y1 = c(1, 3, 2, 4)
)
# Definir listas de inputs, outputs y la cantidad de particiones
inputs <- c("x1", "x2")
outputs <- c("y1")
d <- 2
# Parámetros iniciales del modelo SVF
C <- 1
eps <- 0
method <- 'SSVF'
# Instanciar y entrenar el modelo SVF
svf_instance <- create_SVF(method, inputs, outputs, data, C, eps, d)
svf_instance <- train.SSVF(svf_instance)
# Resolver el modelo y mostrar las soluciones
svf_solution <- solve(svf_instance)
# Imprimir las soluciones de w
print(svf_solution$w)
# Probar la función get_estimation
estimations <- list(
get_estimation.SVF(svf_instance, c(1, 2)),
get_estimation.SVF(svf_instance, c(3, 4)),
get_estimation.SVF(svf_instance, c(1, 7)),
get_estimation.SVF(svf_instance, c(7, 1)),
get_estimation.SVF(svf_instance, c(2, 4)),
get_estimation.SVF(svf_instance, c(7, 1))
)
library(svfpackage2)
# Definir los datos
data <- data.frame(
x1 = c(1, 2, 3, 4),
x2 = c(1, 3, 2, 4),
y1 = c(1, 3, 2, 4)
)
# Definir listas de inputs, outputs y la cantidad de particiones
inputs <- c("x1", "x2")
outputs <- c("y1")
d <- 2
# Parámetros iniciales del modelo SVF
C <- 1
eps <- 0
method <- 'SSVF'
# Instanciar y entrenar el modelo SVF
svf_instance <- create_SVF(method, inputs, outputs, data, C, eps, d)
svf_instance <- train.SSVF(svf_instance)
# Resolver el modelo y mostrar las soluciones
svf_solution <- solve(svf_instance)
# Imprimir las soluciones de w
print(svf_solution$w)
# Probar la función get_estimation
estimations <- list(
get_estimation.SVF(svf_instance, c(1, 2)),
get_estimation.SVF(svf_instance, c(3, 4)),
get_estimation.SVF(svf_instance, c(1, 7)),
get_estimation.SVF(svf_instance, c(7, 1)),
get_estimation.SVF(svf_instance, c(2, 4)),
get_estimation.SVF(svf_instance, c(7, 1))
)
library(svfpackage2)
# Definir los datos
data <- data.frame(
x1 = c(1, 2, 3, 4),
x2 = c(1, 3, 2, 4),
y1 = c(1, 3, 2, 4)
)
# Definir listas de inputs, outputs y la cantidad de particiones
inputs <- c("x1", "x2")
outputs <- c("y1")
d <- 2
# Parámetros iniciales del modelo SVF
C <- 1
eps <- 0
method <- 'SSVF'
# Instanciar y entrenar el modelo SVF
svf_instance <- create_SVF(method, inputs, outputs, data, C, eps, d)
svf_instance <- train.SSVF(svf_instance)
# Resolver el modelo y mostrar las soluciones
svf_solution <- solve(svf_instance)
# Imprimir las soluciones de w
print(svf_solution$w)
# Probar la función get_estimation
estimations <- list(
get_estimation.SVF(svf_instance, c(1, 2)),
get_estimation.SVF(svf_instance, c(3, 4)),
get_estimation.SVF(svf_instance, c(1, 7)),
get_estimation.SVF(svf_instance, c(7, 1)),
get_estimation.SVF(svf_instance, c(2, 4)),
get_estimation.SVF(svf_instance, c(7, 1))
)
library(svfpackage2)
# Definir los datos
data <- data.frame(
x1 = c(1, 2, 3, 4),
x2 = c(1, 3, 2, 4),
y1 = c(1, 3, 2, 4)
)
# Definir listas de inputs, outputs y la cantidad de particiones
inputs <- c("x1", "x2")
outputs <- c("y1")
d <- 2
# Parámetros iniciales del modelo SVF
C <- 1
eps <- 0
method <- 'SSVF'
# Instanciar y entrenar el modelo SVF
svf_instance <- create_SVF(method, inputs, outputs, data, C, eps, d)
svf_instance <- train.SSVF(svf_instance)
# Resolver el modelo y mostrar las soluciones
svf_solution <- solve(svf_instance)
# Imprimir las soluciones de w
print(svf_solution$w)
# Probar la función get_estimation
estimations <- list(
get_estimation.SVF(svf_instance, c(1, 2)),
get_estimation.SVF(svf_instance, c(3, 4)),
get_estimation.SVF(svf_instance, c(1, 7)),
get_estimation.SVF(svf_instance, c(7, 1)),
get_estimation.SVF(svf_instance, c(2, 4)),
get_estimation.SVF(svf_instance, c(7, 1))
)
library(svfpackage2)
# Definir los datos
data <- data.frame(
x1 = c(1, 2, 3, 4),
x2 = c(1, 3, 2, 4),
y1 = c(1, 3, 2, 4)
)
# Definir listas de inputs, outputs y la cantidad de particiones
inputs <- c("x1", "x2")
outputs <- c("y1")
d <- 2
# Parámetros iniciales del modelo SVF
C <- 1
eps <- 0
method <- 'SSVF'
# Instanciar y entrenar el modelo SVF
svf_instance <- create_SVF(method, inputs, outputs, data, C, eps, d)
svf_instance <- train.SSVF(svf_instance)
# Resolver el modelo y mostrar las soluciones
svf_solution <- solve(svf_instance)
# Imprimir las soluciones de w
print(svf_solution$w)
# Probar la función get_estimation
estimations <- list(
get_estimation.SVF(svf_instance, c(1, 2)),
get_estimation.SVF(svf_instance, c(3, 4)),
get_estimation.SVF(svf_instance, c(1, 7)),
get_estimation.SVF(svf_instance, c(7, 1)),
get_estimation.SVF(svf_instance, c(2, 4)),
get_estimation.SVF(svf_instance, c(7, 1))
)
library(svfpackage2)
# Usar datos de prueba
# data <- read.table("~/Documents/GitHub/svfpackage/data/datos2.txt", header = TRUE, sep = ";")
data <- data.frame(x1 = c(1, 2, 3, 4), x2 = c(1, 3, 2, 4), y1 = c(1, 3, 2, 4))
# Definición de inputs, outputs y otros parámetros
inputs <- c("x1", "x2")
outputs <- c("y1")
d <- 2
C <- 1
eps <- 0
method <- 'SSVF'
# Crear y mostrar el objeto SVF
ssvf <- SSVF(method, inputs, outputs, data, C, eps, d)
print(ssvf)
trained_svf <- train.SSVF(ssvf)
# Resolver el modelo y mostrar resultados
solution_svf <- solve(trained_svf)
library(svfpackage2)
# Definir los datos
data <- data.frame(
x1 = c(1, 2, 3, 4),
x2 = c(1, 3, 2, 4),
y1 = c(1, 3, 2, 4)
)
# Definir listas de inputs, outputs y la cantidad de particiones
inputs <- c("x1", "x2")
outputs <- c("y1")
d <- 2
# Parámetros iniciales del modelo SVF
C <- 1
eps <- 0
method <- 'SSVF'
# Instanciar y entrenar el modelo SVF
svf_instance <- create_SVF(method, inputs, outputs, data, C, eps, d)
svf_instance <- train.SSVF(svf_instance)
# Resolver el modelo y mostrar las soluciones
svf_solution <- solve(svf_instance)
# Imprimir las soluciones de w
print(svf_solution$w)
# Probar la función get_estimation
estimations <- list(
get_estimation.SVF(svf_instance, c(1, 2)),
get_estimation.SVF(svf_instance, c(3, 4)),
get_estimation.SVF(svf_instance, c(1, 7)),
get_estimation.SVF(svf_instance, c(7, 1)),
get_estimation.SVF(svf_instance, c(2, 4)),
get_estimation.SVF(svf_instance, c(7, 1))
)
library(svfpackage2)
# Definir los datos
data <- data.frame(
x1 = c(1, 2, 3, 4),
x2 = c(1, 3, 2, 4),
y1 = c(1, 3, 2, 4)
)
# Definir listas de inputs, outputs y la cantidad de particiones
inputs <- c("x1", "x2")
outputs <- c("y1")
d <- 2
# Parámetros iniciales del modelo SVF
C <- 1
eps <- 0
method <- 'SSVF'
# Instanciar y entrenar el modelo SVF
svf_instance <- create_SVF(method, inputs, outputs, data, C, eps, d)
svf_instance <- train.SSVF(svf_instance)
# Resolver el modelo y mostrar las soluciones
svf_solution <- solve(svf_instance)
library(svfpackage2)
# Definir los datos
data <- data.frame(
x1 = c(1, 2, 3, 4),
x2 = c(1, 3, 2, 4),
y1 = c(1, 3, 2, 4)
)
# Definir listas de inputs, outputs y la cantidad de particiones
inputs <- c("x1", "x2")
outputs <- c("y1")
d <- 2
# Parámetros iniciales del modelo SVF
C <- 1
eps <- 0
method <- 'SSVF'
# Instanciar y entrenar el modelo SVF
svf_instance <- create_SVF(method, inputs, outputs, data, C, eps, d)
svf_instance <- train.SSVF(svf_instance)
# Resolver el modelo y mostrar las soluciones
svf_solution <- solve(svf_instance)
library(svfpackage2)
# Definir los datos
data <- data.frame(
x1 = c(1, 2, 3, 4),
x2 = c(1, 3, 2, 4),
y1 = c(1, 3, 2, 4)
)
# Definir listas de inputs, outputs y la cantidad de particiones
inputs <- c("x1", "x2")
outputs <- c("y1")
d <- 2
# Parámetros iniciales del modelo SVF
C <- 1
eps <- 0
method <- 'SSVF'
# Instanciar y entrenar el modelo SVF
svf_instance <- create_SVF(method, inputs, outputs, data, C, eps, d)
svf_instance <- train.SSVF(svf_instance)
# Resolver el modelo y mostrar las soluciones
svf_solution <- solve(svf_instance)
# Imprimir las soluciones de w
print(svf_solution$w)
# Probar la función get_estimation
estimations <- list(
get_estimation.SVF(svf_instance, c(1, 2)),
get_estimation.SVF(svf_instance, c(3, 4)),
get_estimation.SVF(svf_instance, c(1, 7)),
get_estimation.SVF(svf_instance, c(7, 1)),
get_estimation.SVF(svf_instance, c(2, 4)),
get_estimation.SVF(svf_instance, c(7, 1))
)
# Imprimir las estimaciones
for (i in seq_along(estimations)) {
cat(sprintf("Estimación %d: %s\n", i + 1, estimations[[i]]))
}
# Probar la función get_estimation
estimations <- list(
get_estimation.SVF(svf_instance, c(1, 2)),
get_estimation.SVF(svf_instance, c(3, 4)),
get_estimation.SVF(svf_instance, c(1, 7)),
get_estimation.SVF(svf_instance, c(7, 1)),
get_estimation.SVF(svf_instance, c(2, 4)),
get_estimation.SVF(svf_instance, c(7, 1))
)
library(svfpackage2)
# Definir los datos
data <- data.frame(
x1 = c(1, 2, 3, 4),
x2 = c(1, 3, 2, 4),
y1 = c(1, 3, 2, 4)
)
# Definir listas de inputs, outputs y la cantidad de particiones
inputs <- c("x1", "x2")
outputs <- c("y1")
d <- 2
# Parámetros iniciales del modelo SVF
C <- 1
eps <- 0
method <- 'SSVF'
# Instanciar y entrenar el modelo SVF
svf_instance <- create_SVF(method, inputs, outputs, data, C, eps, d)
svf_instance <- train.SSVF(svf_instance)
# Resolver el modelo y mostrar las soluciones
svf_solution <- solve(svf_instance)
# Imprimir las soluciones de w
print(svf_solution$w)
# Probar la función get_estimation
estimations <- list(
get_estimation.SVF(svf_instance, c(1, 2)),
get_estimation.SVF(svf_instance, c(3, 4)),
get_estimation.SVF(svf_instance, c(1, 7)),
get_estimation.SVF(svf_instance, c(7, 1)),
get_estimation.SVF(svf_instance, c(2, 4)),
get_estimation.SVF(svf_instance, c(7, 1))
)
#'
#' Esta función extrae las soluciones del modelo SSVF después de que ha sido resuelto.
#'
#' @param svf Objeto SSVF con un modelo ya entrenado.
#'
#' @return Una lista conteniendo las soluciones para las variables 'w' y 'xi'.
#'
#' @example examples/example_solve.R
#'
#' @export
solve <- function(svf) {
solution <- svf$model$xopt
n_var <- length(svf$grid$data_grid$phi[[1]][[1]])
n_out <- length(svf$outputs)
n_obs <- nrow(svf$data)
n_w_vars <- n_out * n_var
n_xi_vars <- n_out * n_obs
w_solution <- solution[1:n_w_vars]
xi_solution <- solution[(n_w_vars + 1):(n_w_vars + n_xi_vars)]
mat_w <- vector("list", n_out)
for (out in seq_len(n_out)) {
start_index <- (out - 1) * n_var + 1
end_index <- out * n_var
mat_w[[out]] <- round(w_solution[start_index:end_index], 6)
}
mat_xi <- vector("list", n_out)
for (out in seq_len(n_out)) {
start_index <- (out - 1) * n_obs + 1
end_index <- out * n_obs
mat_xi[[out]] <- round(xi_solution[start_index:end_index], 6)
}
svf$solution <- SVFPrimalSolution(mat_w, mat_xi)
return(svf$solution)
Rcplex.close()
}
library(svfpackage2)
# Usar datos de prueba
# data <- read.table("~/Documents/GitHub/svfpackage/data/datos2.txt", header = TRUE, sep = ";")
data <- data.frame(x1 = c(1, 2, 3, 4), x2 = c(1, 3, 2, 4), y1 = c(1, 3, 2, 4))
# Definición de inputs, outputs y otros parámetros
inputs <- c("x1", "x2")
outputs <- c("y1")
d <- 2
C <- 1
eps <- 0
method <- 'SSVF'
# Crear y mostrar el objeto SVF
ssvf <- SSVF(method, inputs, outputs, data, C, eps, d)
print(ssvf)
trained_svf <- train.SSVF(ssvf)
# Resolver el modelo y mostrar resultados
solution_svf <- solve(trained_svf)
library(svfpackage2)
# Usar datos de prueba
# data <- read.table("~/Documents/GitHub/svfpackage/data/datos2.txt", header = TRUE, sep = ";")
data <- data.frame(x1 = c(1, 2, 3, 4), x2 = c(1, 3, 2, 4), y1 = c(1, 3, 2, 4))
# Definición de inputs, outputs y otros parámetros
inputs <- c("x1", "x2")
outputs <- c("y1")
d <- 2
C <- 1
eps <- 0
method <- 'SSVF'
# Crear y mostrar el objeto SVF
ssvf <- SSVF(method, inputs, outputs, data, C, eps, d)
print(ssvf)
trained_svf <- train.SSVF(ssvf)
# Resolver el modelo y mostrar resultados
solution_svf <- solve(trained_svf)
print(solution_svf)
library(svfpackage2)
# Usar datos de prueba
# data <- read.table("~/Documents/GitHub/svfpackage/data/datos2.txt", header = TRUE, sep = ";")
data <- data.frame(x1 = c(1, 2, 3, 4), x2 = c(1, 3, 2, 4), y1 = c(1, 3, 2, 4))
# Definición de inputs, outputs y otros parámetros
inputs <- c("x1", "x2")
outputs <- c("y1")
d <- 2
C <- 1
eps <- 0
method <- 'SSVF'
# Crear y mostrar el objeto SVF
ssvf <- SSVF(method, inputs, outputs, data, C, eps, d)
print(ssvf)
trained_svf <- train.SSVF(ssvf)
# Resolver el modelo y mostrar resultados
solution_svf <- solve(trained_svf)
library(svfpackage2)
# Definir los datos
data <- data.frame(
x1 = c(1, 2, 3, 4),
x2 = c(1, 3, 2, 4),
y1 = c(1, 3, 2, 4)
)
# Definir listas de inputs, outputs y la cantidad de particiones
inputs <- c("x1", "x2")
outputs <- c("y1")
d <- 2
# Parámetros iniciales del modelo SVF
C <- 1
eps <- 0
method <- 'SSVF'
# Instanciar y entrenar el modelo SVF
svf_instance <- create_SVF(method, inputs, outputs, data, C, eps, d)
svf_instance <- train.SSVF(svf_instance)
# Resolver el modelo y mostrar las soluciones
svf_solution <- solve(svf_instance)
# Imprimir las soluciones de w
print(svf_solution$w)
# Probar la función get_estimation
estimations <- list(
get_estimation.SVF(svf_instance, c(1, 2)),
get_estimation.SVF(svf_instance, c(3, 4)),
get_estimation.SVF(svf_instance, c(1, 7)),
get_estimation.SVF(svf_instance, c(7, 1)),
get_estimation.SVF(svf_instance, c(2, 4)),
get_estimation.SVF(svf_instance, c(7, 1))
)
# Imprimir las estimaciones
for (i in seq_along(estimations)) {
cat(sprintf("Estimación %d: %s\n", i + 1, estimations[[i]]))
}
